#git的学习
==============================
3.21
-Git是目前世界上最先进的分布式版本控制系统（没有之一）
-特点：高端大气上档次
	--快速回档
	--协同工作
	--可看更改内容（只限二进制编码）
版本控制的两种：集中式和分布式
=======================
=========指令==========
=======================
-$git init
#将一个目录变成Git可以管理的仓库

-$git add 文件名.%
#将文件添加到仓库

-$Git commit -m“注释”
#把文件提交到仓库

-$git status
#查看结果（时刻掌握仓库当前的状态）

-$git diff
#查看修改，看那些内容被修改

====================
=======版本回退=====
====================
-$git log
#查看历史记录（存档记录）
#如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数

-$git reset
#--回档--($ git reset --hard HEAD^)
#首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
#退档$ git reset --hard 1094a(命令窗口还没有关闭，后面为版本号)
如果关闭了，则用-$git reflog查看每一次的命令，找到id

====================
===工作区和暂存区===
====================
名词：
	stage（或叫index）：暂存区
-------------------------
工作区 -> 暂存区 -> 分支
-------------------------
-第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
-第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
--------------------------
git add把文件从工作区>>>>暂存区
git commit把文件从暂存区>>>>仓库，
git diff查看工作区和暂存区差异，
git diff --cached查看暂存区和仓库差异，
git diff HEAD 查看工作区和仓库的差异
====================
======管理修改======
====================
-$cat 文件
#显示文件内容

====================
======撤销修改======
====================
-$git restore
#丢弃工作区的修改

-$git reset HEAD <file>
#可以把暂存区的修改撤销掉（unstage），重新放回工作区：

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

====================
=====删除文件=======
====================
-$rm test.txt
#直接在文件管理器中把没用的文件删了

要从版本库中删除该文件，那就用命令-$git rm 文件删掉，并且git commit

也可以退档

========================================
##==============远程仓库=============##
========================================
-$git remote add origin git@github.com:michaelliao/learngit.git
#链接远程库

-$ git push -u origin master（第一次操作，-u为远程创建分支）
#把本地库的所有内容推送到远程库上

之后为简化命令
-$ git push origin master
==============================
========远程克隆仓库==========
==============================
$ git clone git@github.com:michaelliao/gitskills.git
#克隆一个库

==============================
========创建合并分支==========
==============================
-$ git checkout -b dev
#创建分支并切换

相当于：
-$ git branch dev
-$ git checkout dev

-$git branch
#查看当前分支

-$git merge dev
#合并指定分支到当前分支

-$git branch -d 分支
#删除分支

-$git switch -c 分支
#创建并切换到新分支

-$git switch master
#直接切换到已有分支

总结：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>或者git switch <name>
	创建+切换分支：git checkout -b <name>或者git switch -c <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	用git log --graph命令可以看到分支合并图